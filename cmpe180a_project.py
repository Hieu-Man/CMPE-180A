# -*- coding: utf-8 -*-
"""CMPE180A Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fB5PhNAnhoFnYscr-rMyYQcYHaw85Ys

# SJSU CMPE 180A Data Structures and Algorithms in Python

**Term Project** (15 points in total)

** Project Name:  your_dataset_name Analytics**

Team Name:

Group Number: 4

Group members with SJSU IDs:


1.   Hieu Ma, 012591124
2.   Tim Lu, 015776566



Date:

#Dataset analysis and visualisation

The goal of dataset analysis is to explain what dataset represents and to illustrate the most interesting and relevant features i.e. columns present in dataset.

Possible steps:
1. Load dataset
2. Inspect data and preprocess columns if needed
3. Visualize data (histogram, scatterplot,...)
4. Analyze dataset by plotting or presenting overview of different classes/groups/features
5. Present your results: prepare slides and an  5 to 10-minute presentation in Week 11 of the course
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("zaheenhamidani/ultimate-spotify-tracks-db")

print("Path to dataset files:", path)

import pandas as pd
import os

#list files the dataset path
print(os.listdir(path))

df = pd.read_csv(os.path.join(path, "SpotifyFeatures.csv"))

print(df.shape)
df.head()

df.info()

#check first rows
df.head()

df.describe()

"""# Data Preprocessing

**Data Cleaning**
"""

#check on missing values
df.isnull().sum()

#check on duplicates
df.duplicated().sum()

# Drop duplicates by artist + track name
df = df.drop_duplicates(subset=['artist_name', 'track_name'])

# Fill any missing track_name
df['track_name'] = df['track_name'].fillna("Unknown")

# Convert types for numeric/categorical features
df['key'] = pd.to_numeric(df['key'], errors='coerce')
df['mode'] = pd.to_numeric(df['mode'], errors='coerce')
df['time_signature'] = pd.to_numeric(df['time_signature'], errors='coerce')

# Drop rows with missing values in numeric features
numeric_cols = ['acousticness','danceability','duration_ms','instrumentalness',
                'liveness','loudness','speechiness','tempo','valence','energy']
df = df.dropna(subset=numeric_cols)

# Check if there are songs with same artist and track name
df[['artist_name', 'track_name']].duplicated().sum()

df = df.drop_duplicates(subset=['artist_name', 'track_name'])
print(df.shape) #check on the number of unique tracks

"""**Feature Engineerin**g
- Convert duration to minutes
"""

df['duration_min'] = df['duration_ms'] / 60000

features = ['acousticness','danceability','duration_min','instrumentalness',
            'liveness','loudness','speechiness','tempo','valence','mode','key','time_signature']

X = df[features]
y = df['energy']

"""#Data Transformation"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""#Exploratory Data Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns

# Distribution of energy
sns.histplot(df['energy'], bins=30)
plt.title("Energy Distribution")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10,8))
sns.heatmap(df[features + ['energy']].corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlations with Energy")
plt.show()

# Scatter plot example
sns.scatterplot(x='danceability', y='energy', data=df)
plt.title("Energy vs Danceability")
plt.show()



"""# Model Selection

"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

rf = RandomForestRegressor(n_estimators=100, random_state=42) #use random forest
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))

import numpy as np

importances = rf.feature_importances_
for f, imp in zip(features, importances):
    print(f"{f}: {imp:.3f}")

# Bar plot of feature importance
plt.figure(figsize=(10,6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance in Random Forest")
plt.show()

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)